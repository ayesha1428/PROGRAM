#include <stdio.h>

int mergeAndCount(int arr[], int temp[], int left, int mid, int right) {
    int i = left;    // Starting index for left subarray
    int j = mid + 1; // Starting index for right subarray
    int k = left;    // Starting index to be sorted
    int invCount = 0;

    // Conditions are checked to ensure that i doesn't exceed mid and j doesn't exceed right
    while (i <= mid && j <= right) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        } else {
            // There are mid - i inversions, because all remaining elements in the left subarray
            // (arr[i], arr[i+1], ..., arr[mid]) are greater than arr[j]
            temp[k++] = arr[j++];
            invCount += (mid - i + 1);
        }
    }

    // Copy the remaining elements of left subarray, if any
    while (i <= mid) {
        temp[k++] = arr[i++];
    }

    // Copy the remaining elements of right subarray, if any
    while (j <= right) {
        temp[k++] = arr[j++];
    }

    // Copy the sorted subarray into Original array
    for (i = left; i <= right; i++) {
        arr[i] = temp[i];
    }

    return invCount;
}

int mergeSortAndCount(int arr[], int temp[], int left, int right) {
    int mid, invCount = 0;
    if (right > left) {
        mid = (right + left) / 2;

        invCount += mergeSortAndCount(arr, temp, left, mid);
        invCount += mergeSortAndCount(arr, temp, mid + 1, right);
        invCount += mergeAndCount(arr, temp, left, mid, right);
    }
    return invCount;
}

int countInversions(int arr[], int n) {
    int temp[n];
    return mergeSortAndCount(arr, temp, 0, n - 1);
}

int main() {
    int n;

    // Read the number of orders
    printf("Enter the number of orders: ");
    scanf("%d", &n);

    int processingTimes[n];

    // Read the processing times
    printf("Enter the processing times:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &processingTimes[i]);
    }

    // Count inversions
    int inversionCount = countInversions(processingTimes, n);

    // Output the count of inversion pairs
    printf("Number of inversion pairs: %d\n", inversionCount);

    return 0;
}
